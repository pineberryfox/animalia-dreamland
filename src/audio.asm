.include "constants.inc"

.segment "CODE"

.export init_apu
.proc init_apu
	LDY #$13
reset:	LDA apu_initial_state,Y
	STA $4000,Y
	DEY
	BPL reset

	;; skip $4014 (OAMDMA)
	LDA #$0F
	STA $4015
	LDA #$40
	STA $4017
	RTS
.endproc


.export advance_audio
.proc advance_audio
	LDA #$00
	STA base
	STA channel
	LDA #$40
	STA base + 1
	LDA song
	STA cursong
	LDA song + 1
	STA cursong + 1
	LDA duration
	STA curduration
	JSR in_advance_audio
	LDA curduration
	STA duration
	LDA cursong
	STA song
	LDA cursong + 1
	STA song + 1

	INC channel
	LDA #$08
	STA base
	LDA song + 2
	STA cursong
	LDA song + 3
	STA cursong + 1
	LDA duration + 1
	STA curduration
	JSR in_advance_audio
	LDA curduration
	STA duration + 1
	LDA cursong
	STA song + 2
	LDA cursong + 1
	STA song + 3
	RTS
.endproc
.proc in_advance_audio
	DEC curduration
	BEQ continue
	RTS
continue:
	LDY #$00
	LDA (cursong),Y
	BMI commands
	TAX
	INY
	LDA (cursong),Y
	STA curduration
	LDA #$8F
	STX temp
	LDX channel
	ORA volume_flags,X
	LDX temp
	CPX #$7F
	BNE playnote
	LDA #$80
	LDX #$00
playnote:
	LDY #$00
	STA (base),Y
	LDA period_table_hi,X
	INY
	INY
	INY
	STA (base),Y
	LDA period_table_lo,X
	DEY
	STA (base),Y

	LDA cursong
	CLC
	ADC #$02
	STA cursong
	LDA cursong + 1
	ADC #$00
	RTS
commands:
	EOR #$FF
	ASL A
	TAX
	LDA jmptable,X
	STA command
	LDA jmptable+1,X
	STA command+1
	LDX channel
	JMP (command) ; tail-call
.endproc

.proc cmd_jump
	LDY #$01
	LDA (cursong),Y
	TAX
	INY
	LDA (cursong),Y
	STA cursong + 1
	STX cursong
	JMP in_advance_audio::continue ; tail-call
.endproc

.proc cmd_stop
	RTS
.endproc
.proc cmd_sustain_on
	LDA volume_flags,X
	ORA #$20
	STA volume_flags,X
	JMP finish_cmd ; tail-call
.endproc
.proc cmd_sustain_off
	LDA volume_flags,X
	AND #$DF
	STA volume_flags,X
	JMP finish_cmd ; tail-call
.endproc
.proc cmd_decay_on
	LDA volume_flags,X
	AND #$7F
	STA volume_flags,X
	JMP finish_cmd ; tail-call
.endproc
.proc cmd_decay_off
	LDA volume_flags,X
	ORA #$10
	STA volume_flags,X
	JMP finish_cmd ; tail-call
.endproc
.proc finish_cmd
	INC cursong
	BNE end
	INC cursong + 1
end:	JMP in_advance_audio::continue ; tail-call
.endproc


.segment "RODATA"
apu_initial_state:
	.byte $30, $08, $00, $00
	.byte $30, $08, $00, $00
	.byte $80, $00, $00, $00
	.byte $30, $00, $00, $00
	.byte $00, $00, $00, $00

jmptable:
	.word cmd_stop, cmd_jump
	.word cmd_sustain_on, cmd_sustain_off
	.word cmd_decay_on, cmd_decay_off


; NTSC period table generated by mktables.py
.segment "RODATA"
period_table_lo:
	.byte $f1, $7f, $13, $ad, $4d, $f3, $9d, $4c, $00, $b8, $74, $34
	.byte $f8, $bf, $89, $56, $26, $f9, $ce, $a6, $80, $5c, $3a, $1a
	.byte $fb, $df, $c4, $ab, $93, $7c, $67, $52, $3f, $2d, $1c, $0c
	.byte $fd, $ef, $e1, $d5, $c9, $bd, $b3, $a9, $9f, $96, $8e, $86
	.byte $7e, $77, $70, $6a, $64, $5e, $59, $54, $4f, $4b, $46, $42
	.byte $3f, $3b, $38, $34, $31, $2f, $2c, $29, $27, $25, $23, $21
	.byte $1f, $1d, $1b, $1a, $18, $17, $15, $14
period_table_hi:
	.byte $07, $07, $07, $06, $06, $05, $05, $05, $05, $04, $04, $04
	.byte $03, $03, $03, $03, $03, $02, $02, $02, $02, $02, $02, $02
	.byte $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
	.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	.byte $00, $00, $00, $00, $00, $00, $00, $00


.segment "BSS"
.export song
command: .res 2
channel: .res 1
song: .res 4
volume_flags: .res 2

.segment "ZEROPAGE"
.exportzp duration
cursong: .res 2
curduration: .res 1
temp: .res 1
duration: .res 2
base: .res 2

.segment "RODATA"
.export testsong_pulse, testsong_tri
SCALEBASE = 1*12+7
BASEDUR = 12
CMD_DECAY_OFF = $FA
CMD_DECAY_ON = $FB
CMD_SUSTAIN_OFF = $FC
CMD_SUSTAIN_ON = $FD
testsong_pulse:
	.byte CMD_DECAY_OFF
	.byte CMD_SUSTAIN_OFF
	.byte SCALEBASE + $00, BASEDUR
	.byte SCALEBASE + $0A, BASEDUR
	.byte CMD_SUSTAIN_ON
	.byte SCALEBASE + $0C, BASEDUR
	.byte CMD_SUSTAIN_OFF
	.byte SCALEBASE + $12, BASEDUR
	.byte SCALEBASE + $11, BASEDUR
	.byte SCALEBASE + $0F, BASEDUR
	.byte CMD_SUSTAIN_ON
	.byte SCALEBASE + $0D, BASEDUR
	.byte CMD_SUSTAIN_OFF
	.byte SCALEBASE + $0C, BASEDUR
	.byte SCALEBASE + $00, BASEDUR
	.byte SCALEBASE + $0A, BASEDUR
	.byte SCALEBASE + $0C, BASEDUR
	.byte SCALEBASE + $0F, BASEDUR
	.byte SCALEBASE + $00, BASEDUR
	.byte SCALEBASE + $08, BASEDUR
	.byte CMD_SUSTAIN_ON
	.byte SCALEBASE + $0A, BASEDUR
	.byte CMD_DECAY_ON
	.byte SCALEBASE + $01, BASEDUR
	.byte CMD_SUSTAIN_OFF
	.byte $FE
	.word testsong_pulse

testsong_tri:
	.byte SCALEBASE +12+ $00, BASEDUR * 4
	.byte SCALEBASE +12+ $03, BASEDUR * 4
	.byte SCALEBASE +12+ $00, BASEDUR * 4
	.byte SCALEBASE    + $0A, BASEDUR
	.byte SCALEBASE    + $05, BASEDUR
	.byte SCALEBASE    + $06, BASEDUR
	.byte SCALEBASE    + $0C, BASEDUR
	.byte $FE
	.word testsong_tri
